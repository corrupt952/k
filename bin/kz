#!/usr/bin/env bash

##
# Logger
logger::print() {
  local level="$1"
  local -a messages=()

  if [[ -n "$DEBUG" ]]; then
    messages+=("[$(date +'%Y-%m-%dT%H:%M:%S.%3N%z')]")
  fi
  messages+=("[${level}]")

  case "$level" in
  ERROR | WARN)
    echo "${messages[*]// /|} ${*:2}" >&2
    ;;

  INFO | DEBUG)
    echo "${messages[*]// /|} ${*:2}"
    ;;
  esac
}
logger::error() {
  logger::print "ERROR" "$*"
}
logger::warn() {
  logger::print "WARN" "$*"
}
logger::info() {
  logger::print "INFO" "$*"
}
logger::debug() {
  [[ -z "$DEBUG" ]] && return

  logger::print "DEBUG" "$*"
}

##
# Global variables
KZ_PREFIX="${KZ_PREFIX-/usr/local}"
KZ_PREFIX="${KZ_PREFIX%/}"
readonly KZ_PREFIX
readonly KZ_CACHE_DIR="${KZ_PREFIX}/k/versions"

abort() {
  logger::error "$*"
  exit 1
}

function display_tarball_platform() {
  local os="unexpected_os"
  local uname_a="$(uname -a)"
  case "${uname_a}" in
  Linux*) os="linux" ;;
  Darwin*) os="darwin" ;;
  esac

  local arch="unexpected_arch"
  local uname_m="$(uname -m)"
  case "${uname_m}" in
  x86_64) arch=x64 ;;
  i386 | i686) arch="x86" ;;
  aarch64) arch=arm64 ;;
  armv8l) arch=arm64 ;; # armv8l probably supports arm64, and there is no specific armv8l build so give it a go
  *)
    # e.g. armv6l, armv7l, arm64
    arch="${uname_m}"
    ;;
  esac
  # Override from command line, or version specific adjustment.
  [ -n "$ARCH" ] && arch="$ARCH"

  echo "${os}-${arch}"
}

tarball_url() {
  local -r version="$1"
  echo ""
}

# TODO: help
command::help() {
  cat <<-EOS
EOS
}

command::install() {
  local -r version="$1"

  [[ -z "$version" ]] && abort "Required version"

  local -r install_path="$KZ_CACHE_DIR/kustomize/$version"
  local -r lockfile_path="$install_path/kz.lock"
  if [[ -d "$install_path" ]]; then
    if [[ ! -e "$lockfile_path" ]]; then
      exit
    fi
  fi

  logger::info "Installing $version"

  local url="$(tarball_url "$version")"

  logger::debug "Start: mkdir $install_path"
  mkdir -p "$install_path" || abort "sudo required (or change ownership, or define KZ_PREFIX)"
  touch "$lockfile_path"
  logger::debug "Complete: mkdir $install_path"

  logger::debug "Start: delete $lockfile_path"
  rm -f "$lockfile_path"
  logger::debug "Complete: delete $lockfile_path"

  echo "$@"
}

##
# main
main() {
  local subcommand="$1"

  case "$subcommand" in
  install)
    command::install "${@:2}"
    exit
    ;;

  help)
    command::help
    exit
    ;;

  *)
    logger::info "info"
    logger::debug "debug"
    logger::warn "Unkown subcommand: ${subcommand}"
    exit 1
    ;;
  esac
}
main "$@"
